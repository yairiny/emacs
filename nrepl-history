;; -*- coding: utf-8-unix -*-
;; Automatically written history of nREPL session
;; Edit at your own risk

("(process-incoming-bills)" "(move-incoming-bill (second bills) :processed)" "(move-incoming-bill (second bills :processed))" "(pprint bills)" "(pprint (map :attachments bills))" "(use 'clojure.pprint)" "(map :attachments bills)" "bills" "(def bills (ibr/get-incoming-bills))" "bills" "(def bills (ibr/get-incoming-bills))" "(count *1)" "(get-incoming-bills)" "(alength bts)" "(type bts)" "(def bts (.toByteArray baos))" "(io/copy dt baos)" "(require '[clojure.java.io :as io])" "(require ['clojure.java.io :as io])" "(def baos (java.io.ByteArrayOutputStream.))" "dt" "(def dt (:data *1))" "(first (:attachments *1))" "(first *1)" "(get-incoming-bills)" "(cfg/get-cfg :aws-creds)" "(cfj/init-ns 'payreq.config)" "(cfg/get-cfg :aws-creds)" "(get-cfg :aws-creds)" " (get-incoming-bills)" "(get-cfg)" "(cfj/init-ns 'payreq.config)" "(get-cfg)" "(in-ns 'payreq.config)" "(require 'payreq.config)" "(seq [])" "(handle-outgoing-files)" "(get-cfg :queue-prefix)" "(get-cfg)" "(handle-incoming-files)" "(get-cfg :sftp)" "(cfj/init-ns 'payreq-agent.config)" "(handle-incoming-files)" "(get-cfg :sftp)" "(cfj/init-ns 'payreq-agent.config)" "(cfj/init-ns)" "(cfj/find-and-init-config-ns)" "(get-cfg)" "(handle-incoming-email)" "(cfg/get-cfg)" "(.toString (java.util.UUID/randomUUID))" "(all-incoming-bills)" "(.writeTo (:imap-message payreq-agent.imap/msg) baos)" "(def baos (java.io.ByteArrayOutputStream.))" "(java.io.ByteArrayInputStream.)" "(import 'java.io)" "(import java.io)" "(java.io/ByteArrayOutputStream.)" "(ancestors (type *1))" "(:imap-message payreq-agent.imap/msg)" "(ancestors (:imap-message payreq-agent.imap/msg))" "(ancestors (:imap-message msg))" "payreq-agent.imap/msg" "(payreq-agent.imap/msg)" "(def s1 (ser/serialize thebytes :clojure))" "(def s1 (ser/serialize thebytes :json))" "(def s1 (ser/serialize thebytes :smile))" "(count s1)" "(def s1 (ser/serialize thebytes :text))" "(alength thebytes)" "(def thebytes (:data-bytes payreq-agent.imap/atch))" "(def thebytes (:data-bytes atch))" "(ser/serialize payreq-agent.imap/msg :json)" "(ser/serialize {:a 1} :json)" "(ser/serialize {:a 1} :text)" "(ser/serialize payreq-agent.imap/msg :text)" "(ser/serialize payreq-agent.imap/msg :smile)" "(type *1)" "(ser/serialize {:a 1} :smile)" "(ser/serialize {:a 1} :bytes)" "(ser/serialize payreq-agent.imap/msg :bytes)" "(ser/serialize (type payreq-agent.imap/msg) :bytes)" "(ser/serialize (type payreq-agent.imap/msg))" "(type payreq-agent.imap/msg)" "(alength (:data-bytes atch))" "(.length (:data-bytes atch))" "(type (:data-bytes atch))" "(.length (:data atch))" "(keys atch)" "(def atch (second (:attachments msg)))" "(map keys (:attachments msg))" "(map :keys (:attachments msg))" "(map :content-type (:attachments msg))" "(count (:attachments msg))" "(keys msg)" "(def msg (first msgs))" "(count msgs)" "(def msgs (all-incoming-bills))" "(keys (first msg))" "(slurp *1)" "(:data (first (:attachments (first msg))))" "(first (:attachments (first msg)))" "(first (:attachments *1))" "(def msg *1)" "(all-incoming-bills)" "(shutdown-scheduler)" "(init-scheduler)" "(shutdown-scheduler)" "(init-scheduler)" "(shutdown-scheduler)" "(init-scheduler)" "(get-cfg :jobs)" "(get-cfg :jobs :enable-schedule)" "(cfj/init-ns 'payreq-agent.config)" "(get-cfg :jobs :enable-schedule)" "(get-cfg :jobs)" "(get-cfg :jobs :enable-schedule)" "(get-in *1 [:jobs :enable-schedule])" "(get-cfg)" "(get-cfg :sftp :host)" "(get-cfg :sftp)" "(get-in base-config [:jobs :enable-schedule])" "(get-cfg :jobs :enable-schedule)" "(keys *1)" "(get-cfg :jobs)" "(get-cfg :sftp :host)" "(get-cfg :jobs :enable-schedule)" "(get-cfg :sftp :host)" "(get-cfg :sftp)" "(get-cfg :jobs :enable-schedule)" "(get-cfg :jobs :read-incoming-emails)" "(get-cfg :jobs :read-incoming-email)" "(get-cfg :jobs :enable-schedule)" "(get-cfg :jobs)" "(get-cfg :imap-server)" "(:body *1)" "(:object (ex-data *e))" "(show-req *e)" "(create-contact test-user)" "(show-req *e)" "(print-resp *e)" "(create-contact test-user)" "(create-contact)" "(fetch-contact 1)" "(print-resp *e)" "(fetch-contact 1)" "(test)" "(basic-template)" "(into {} (filter seq [[:a 1] [:b 2] [] [:d 5]]))" "(into {} (filter first [[:a 1] [:b 2] [] [:d 5]]))" "(into {} (filter first [[:a 1] [:b 2] []]))" "(into {} [[:a 1] [:b 2] []])" "(into {} [[:a 1] [:b 2]])" "(into {} [[:a 1]])" "(into {} [:a 1])" "(reduce into {} [[:a 1] [:b 3]])" "(reduce into {} [[:a 1] [:b 2] [] [:c 3]])" "(into {} [:a 1] [:b 2] [] [:c 3])" "(convert-params {:users [{:age-today s->i}]}
            {\"users\" [{:name \"John\" \"ageToday\" \"4\"} {\"name\" \"Jane\" :ageToday \"6\"}]})" "(convert-params {:users [{:age-today #'c/s->i}]}
            {\"users\" [{:name \"John\" \"ageToday\" \"4\"} {\"name\" \"Jane\" :ageToday \"6\"}]})" "(boolean? 6)" "integer" "(s->d \"5.76\")" "(s->d \"5\")" "(s->d 5.7)" "(s->d 5)" "(s->i \"5.7\")" "(s->i \"5\")" "(s->i 5.7)" "(s->i 5)" "(type *1)" "(int 5.7)" "(Integer. 5.7)" "(number? \"5\")" "(number? 5.7)" "(number? 5)" "(s->b \"TRuE\")" "(s->b \"TRUE\")" "(s->b \"true\")" "(s->b \"1\")" "(s->d \"5\")" "(s->i \"a\")" "(s->i \"5\")" "*e" "(.printStackTrace *e)" "*e" "(push-content)" "test-creds" "(check-oauth)" "(true? false)" "(true? 1)" "(true? true)" "(true? nil)" "(oa/access-token consumer @debug-token \"1ce4d95862\")" "@debug-token" "(request-token-and-redirect)" "(oa/access-token consumer @debug-token \"a489ffd438\")" "@debug-token" "(request-token-and-redirect)" "(complete-auth \"yair\" \"bad\")" "(oa/credentials consumer (:oauth_token creds) (:oauth_token_secret creds) :POST \"https://api.actionstep.com/frontend/api/participant\" {:status \"POSTing from mallen in clojure\"})" "creds" "(def creds {:oauth_token \"dfffd0e4ca08898a19e6d905cfe42103052af8bd2\", :oauth_token_secret \"cedefa192a0aad7cd37834f6120cf7d5\"})" "(def creds)" "(oa/access-token consumer tok verifier)" "(:oauth_token tok)" "tok" "(def tok {:oauth_callback_confirmed \"1\", :oauth_token \"d2db33dc0772bef8416499e7864dff40052af8b21\", :oauth_token_secret \"63eda5094943eee7b7341e58c6b5e35a\", :xoauth_token_ttl \"3600\"})" "(def verifier \"801a1638aa\")" "(oa/user-approval-uri consumer (:oauth_token *1))" "(request-token)" "(oa/request-token consumer)" "consumer" "(test)" "(oa/request-token consumer)" "(.getPrivate kp)" "(def kp *1)" "(.readObject *1)" "(org.bouncycastle.openssl.PEMReader. rdr)" "rdr" "(def rdr *1)" "(java.io.StringReader. private-key)" "private-key" "(oa/request-token consumer)" "(System/getProperty \"java.version\")" "(System/getProperty \"jre.version\")" "(System/getProperty \"java.home\")" "(System/getProperty \"jvm.version\")" "consumer" "(base-config)" "(eval [1 2])" "(eval 1)" "(eval {:val 1})" "(eval [6 2])" "(eval 1)" "((div 5) 7)" "(div 5 6)" "div" "[(eval 1) (eval [190 5])]" "(eval 1)" "(eval [[1932 0] 23])" "(pure 1)" "(eval [[1932 2] 23])" "(eval [2 41])" "(eval [241])" "(eval [2 1])" "(eval [1 1])" "(eval 1)" "(eval [6 [2 2]])" "(eval [2 2])" "(eval [2 1])" "(eval [1])" "(eval 1)" "(seq [])" "(seq 1)" "(seq [1])" "(get 1)" "(get {:error true})" "(get {:error false?})" "(get 1)" "(+ 1 1)" "(times)" "+" "*" "(* 2 1)" "(match 1 ^x (is #(= 1 %)) (* 2 x))" "(match 2 ^x (is #(= 1 %)) (* 2 x))" "(match 2 ^x (is #(= 1 %)) x)" "(match 1 ^x (is #(= 1 %)) x)" "(match 1 ^x (is #(= 1)) x)" "(match 1 ^x (is (= 1)) x)" "(match 1 ^x 1 x)" "(match [1] ^x [1] x)" "(match [1 2 3] ^x [1 4 3] x)" "(match [1 2 3] ^x [1 2 3] x)" "(match [1 2 3] ^x [1 _ 3] x)" "(match 1 ^x 1 x)" "(match 1 ^x 1 :yair)" "(match 1 1 :yair)" "(match 1 ^x (= 1) x)" "(match 1 ^x (= 2) x)" "(match 1 ^x (is keyword?) x)" "(match 1 ^x 2 x)" "(match 1 ^y 2 x)" "(match 1 ^y _ x)" "(match 1 ^x _ x)" "(match 1 ^x _ (* 2 x))" "(match 1 ^x _ x)" "(foo \"Yair\")" "(foo)" "(send-costs data-map)" "data-map" "(def data-map {:middle-name \"J\", :state \"NSW\", :postcode 2219, :last-name \"Iny\", :first-name \"Yair\", :address1 \"12/152 Russell Ave\", :city \"Dolls Point\", :email \"yiny@icm-consulting.com.au\"})" "data-map" "(send-costs data-map)" "(build-message data-map :costs-agreement)" "(make-email-template data-map :costs-agreement)" "(build-message data-map :costs-agreement)" "(build-message :costs-agreement data-map)" "(send-costs data-map)" "(make-email-template data-map :costs-agreement)" "(make-name data-map)" "data-map" "(make-email-template data-map :costs-agreement)" "data-map" "(def data-map (assoc data-map :email \"yiny@icm-consulting.com.au\"))" "(io/copy (create-pdf-is data-map :costs-agreement) (io/file \"/Users/yair/temp/test1.pdf\"))" "(io/copy *1 \"/Users/yair/temp/test1.pdf\")" "(create-pdf-is data-map :costs-agreement)" "(clojure.pprint/pprint data-map)" "(clojure.pprint/pprint *)" "(def data-map {:first-name \"Yair\" :last-name \"Iny\" :middle-name \"J\" :address1 \"12/152 Russell Ave\" :city \"Dolls Point\" :state \"NSW\" :postcode 2219})" "(make-address {:address1 \"12/152 Russell Ave\" :address2 \"c/o Jannete Keady\" :city \"Dolls Point\" :state \"NSW\" :postcode 2219})" "(make-address {:address1 \"12/152 Russell Ave\" :city \"Dolls Point\" :state \"NSW\" :postcode 2219})" "(default-time-zone)" "(make-name {:first-name \"Yair\" :last-name \"Iny\" :middle-name \"J\"})" "(make-name {:first-name \"Yair\" :last-name \"Iny\"})" "(make-name {:first-name \"Yair\"})" "(make-name {:company-name \"ICM\"})" "(read-pdf-template \"costs-agreement\")" "(com.itextpdf.text.pdf.PdfReader. (clojure.java.io/resource \"pdfs/costs-agreement.pdf\"))" "(clojure.java.io/resource \"pdfs/costs-agreement.pdf\")" "(resource \"pdfs/costs-agreement.pdf\")" "(get-cfg :auth :username)" "(c/compare \"movingOn1asd3\" (get-cfg :auth :password))" "(c/compare \"movingOn13\" (get-cfg :auth :password))" "(c/compare \"h\" \"asd\")" "(get-cfg :auth :username)" "(encrypt \"movingOn13\")" "(use 'noir.util.crypt)" "(doseq [k (keys response)] (println k))" "(type response)" "response" "(def response (find-contact-by-bvrn ctx \"BVRNTU00102\"))" "(keys *1)" "(find-contact-by-bvrn ctx \"BVRNTU00102\")" "(find-contact-by-bvrn ctx \"BVRN\")" "(def ctx (@#'payreq.billing-interface.saasu/create-context (get-cfg :billing-systems :saasu)
                                                                                   {:user-id \"45420\" :secret \"81164DE2C236483EAE9FF8C8A33ADD16\"}))" "(find-contact-by-bvrn \"BVRNTU00102\")" "ctx" "(reset-testing-accounts)" "(contact-list-query ctx \"BVRNTU00102\")" "ctx" "(def ctx (@#'payreq.billing-interface.saasu/create-context (get-cfg :billing-systems :saasu)
                                                                                   {:user-id \"45420\" :secret \"81164DE2C236483EAE9FF8C8A33ADD16\"}))" "(println (write-csv [[\"1,2\" \"4\"]]))" "(println (write-csv [[\"1,2\" \"4\"]] :force-quote false))" "(println (write-csv [[\"1,2\" \"4\"]] :force-quote true))" "(println (write-csv [[\"1,2\"]] :force-quote true))" "(println (write-csv [[\"\\\"1\\\"\"]] :force-quote true))" "(println (write-csv [[\"1\"]] :force-quote true))" "(println (write-csv [[\"\\\"1\\\"\"]]))" "(println (write-csv [[\"1\"]]))" "(println (write-csv [[\"\\\"1\\\"\" \"4\"]]))" "(println (write-csv [[\"\\\"1\\\"\"]]))" "(println (write-csv [[\"\\\"1\"]]))" "(str (write-csv [[\"\\\"1\"]]))" "(write-csv [[\"\\\"1\"]])" "(write-csv [[\"1\"]])" "(payreq.registration/send-processed-registrations)" "(payreq.registration/process-payer-registrations)" "(= *1 \"CT.BND.BVPRQ00000000001.20131206010203.csv\")" "(base-filename :bill-summary-loading)" "(do-incoming-file-process)" "(validate-filename-and-get-type \"CT.BSL.BVPRQ00000000001.12345678901234.ack.csv\")" "(validate-filename-and-get-type \"PR.BSL.BVPRQ00000000001.12345678901234.ack.csv\")" "(validate-filename-and-get-type \"CT.PSU.BVPRQ00000000001.12345678901234.ack.csv\")" "(get-filename-info \"CT.PRR.BVPRQ00000000001.12345678901234.csv\")" "(true? 1)" "(true? nil)" "(get-filename-info \"CT.PRR.BVPRQ00000000001.12345678901234.csv\")" "(re-matches #\"(?:HE)|(?:VD)LL\" \"VDLL\")" "(re-matches #\"(?:HE)|(?:VD)LL\" \"HELL\")" "(re-matches #\"(?:HE|VD)LL\" \"VDLL\")" "(re-matches #\"(?:HE|VD)LL\" \"HELL\")" "(re-matches #\"(?:HE)|(?:VD)LL\" \"HELL\")" "(re-matches #\"(?:HE)|(?:VD)LL\" \"HV\")" "(re-matches #\"HE|VD\" \"HV\")" "(re-matches #\"HE|VD\" \"VDZ\")" "(re-matches #\"HE|VD\" \"VD\")" "(re-matches #\"HE|VD\" \"HE\")" "(mark-alerts-as-sent [{:id 1} {:id 5}])" "(send-alerts [{:id 1} {:id 4}])" "(now)" "(send-alerts :immediate)" "(partition-by :a [{:a 1 :b 1} {:a 1 :b 3} {:a 2 
                                                        :b 2}  {:a 3 :b 4}])" "(partition-by :a [{:a 1 :b 1} {:a 2 
                                                        :b 2} {:a 1 :b 3} {:a 3 :b 4}])" "(write-biller-alert 1 :registration.complete {:bvrn \"102\"})" "(write-biller-alert 1 :registration.complete)" "(find-users-with-notification-permission-for-account 1 :registration.failed)" "(find-users-with-notification-permission-for-account 2 :registration.failed)" "(find-users-with-notification-permission-for-account 1 :registration.failed)" "(find-users-with-notification-permission-for-account 2 :registration.failed)" "(find-users-with-notification-permission-for-biller 2 :registration.failed)" "(find-users-with-notification-permission 2 :registration.failed false)" "(find-users-with-notification-permission 2 :registration.failed true)" "(find-users-with-notification-permission 1 :registration.failed true)" "(find-users-with-notification-permission 1 :registration.failed false)" "(find-users-with-notification-permission 1 :registration.failed true)" "(k/select user-alert)" "(get-prefs-for-users [1 2] :registration.failed)" "(name \"Hello\")" "(get-prefs-for-users [1 2] :registration.failed)" "(k/select user-alert-prefs)" "(find-users-with-notification-permission 3 :registration.failed)" "(find-users-with-notification-permission 1 :registration.failed)" "(find-users-with-notification-permission 1 :registration.faileds)" "(find-users-with-notification-permission 1 :registration.failed)" "(find-users-with-notification-permission 2 :registration.failed)" "(clojure.set/union (set [1 2]) (set [2 3]))" "(clojure.set/union [1 2] [2 3])" "(find-users-with-notification-permission 2 :registration.failed)" "(find-users-with-notification-permission 1 :registration.failed)" "(find-users-with-notification-permission nil :registration.failed)" "(find-users-with-notification-permission nil :bill.draft)" "(find-users-with-notification-permission nil :a)" "(k/select role-permission)" "(k/select role)" "(find-users-with-notification-permission nil :hello)" "(write-alert-record {:user-id 1 :event-type :bill.draft :alert-type :email})" "(write-alert-record {:user-id 1 :event-type :bill.draft :alert-type :song})" "(k/select user-alert)" "(format \"%d %s\" 1 {:a 1})" "(str {:a 1 :b 2})" "(write-alert-record {:user-id 1 :event-type :bill.draft :alert-type :email})" "(write-alert-record {:user-id 1 :event-type :test :alert-type :email})" "(k/select user-alert)" "(k/select user-alery)" "(send-email {:to \"yiny@icm-consulting.com.au\" :subject \"Hello\" :body \"<p>World<b>!!!</b></p>\"})" "(re-seq #\"<p>.*</p>\" \"<p>Hello</p><p>Goodbye</p>\")" "(re-seq #\"<p>.*</p>\" \"<p>Hello</p>\")" "(re-seq #\"<p>.*</p>\" \"Hello\")" "(send-email {:to \"yiny@icm-consulting.com.au\" :subject \"Hello\" :body \"World\"})" "(to-html \"Hello\")" "(send-email {:to \"yiny@icm-consulting.com.au\" :subject \"Hello\" :body \"World\"})" "(meta *1)" "(with-meta {} {:a 3})" "(with-meta \"a\" {:a 3})" "(with-meta 1 {:a 3})" "^{}" "(hash-map)" "(hashmap)" "(map)" "(meta {})" "(smtp-data)" "(@(resolve (get-cfg :smtp :creds-fn)))" "@(resolve (get-cfg :smtp :creds-fn))" "(resolve (get-cfg :smtp :creds-fn))" "(get-cfg :smtp :creds-fn)" "(smtp-data)" "(find-entities)" "(is-symbol-entity? #'actor-system)" "(is-symbol-entity? #'actor-system-transformation-rules)" "(is-symbol-entity? #'actor-system)" "(is-symbol-entity? #'actor-system-transformation-rules)" "(is-symbol-entity? #'user)" "(deref #'user)" "#'user" "(is-symbol-entity? #'user)" "(every? not-nil? [1 2 3])" "(every? identity [1 2 3])" "(deref #'user)" "(deref 'user)" "(resolve 'user)" "user" "(user)" "(ns-publics *ns*)" "(true? 1)" "(Boolean/valueOf \"1\")" "(Boolean/valueOf \"yes\")" "(Boolean/valueOf \"T\")" "(Boolean/valueOf \"TRUE\")" "(Boolean/valueOf \"True\")" "(Boolean/valueOf \"yair\")" "(Boolean/valueOf \"false\")" "(Boolean/valueOf \"true\")" "(Boolean. \"false\")" "(Boolean. \"true\")" "(boolean \"false\")" "(boolean \"true\")" "(update-in {:a 2} [:b] str)" "(update-in {:a 2} [:b] inc)" "(update-in {:a 2} [:a] inc)" "(update-in [:a] inc {:a 2})" "(empty? {})" "(k/select db/actor-system)" "(apply dissoc {:a 1 :b 2 :c 3 :d 4} [:b :c])" "(test false (println \"Hello\") (println \"Goodbye\"))" "(test true (println \"Hello\") (println \"Goodbye\"))" "(test true (println \"Hello\"))" "(test false (println \"Hello\"))" "(test true (println \"Hello\"))" "(test true (+ 3 4))" "(macroexpand-1 '(test 1 (+ 3 4)))" "(macroexpand-1 '(test false (+ 3 4)))" "(test false (+ 3 4))" "(macroexpand-1 '(test true (+ 3 4)))" "(macroexpand-1 '(test false (+ 3 4)))" "(test false (+ 1 2))" "(pr-str '(+ 2 3
                                     ))" "(pr-str {:a 1 :b 2})")